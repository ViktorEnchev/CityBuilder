// <auto-generated />
using System;
using CityBuilder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CityBuilder.Data.Migrations
{
    [DbContext(typeof(CityBuilderDbContext))]
    [Migration("20201010174335_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CityBuilder.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CityCreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CityBuilder.Data.Entities.Road", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FirstCityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RoadCreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RoadLength")
                        .HasColumnType("bigint");

                    b.Property<string>("RoadName")
                        .HasColumnType("text");

                    b.Property<int>("SecondCityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirstCityId");

                    b.HasIndex("SecondCityId");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("CityBuilder.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "Demo",
                            Username = "Demo"
                        });
                });

            modelBuilder.Entity("CityBuilder.Data.Entities.Road", b =>
                {
                    b.HasOne("CityBuilder.Data.Entities.City", "FirstCity")
                        .WithMany()
                        .HasForeignKey("FirstCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityBuilder.Data.Entities.City", "SecondCity")
                        .WithMany()
                        .HasForeignKey("SecondCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
